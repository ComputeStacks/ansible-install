---
enable_debug: false

# How are we backing up the data?
# * if no backup server exists in inventory, use local,
# * otherwise the default is ssh.
backup_filesystem_kind: "{% if groups['backup_server'] | length < 1 %}local{% else %}ssh{% endif %}" # local, nfs, or ssh

##
# vars from inventory
cs_portal_domain: ""
consul_listen_ip: "127.0.0.1"
consul_listen_port: 8501
consul_token: "" # placeholder

##
# Agent Configuration
docker_api_version: "1.41"
agent_backup_image: "ghcr.io/computestacks/cs-docker-borg:1.4"
agent_image: "ghcr.io/computestacks/backup-agent"
agent_image_tag: "1.5"
agent_download_url: "https://f.cscdn.cc/file/cstackscdn/packages/cs-agent/cs-agent-amd64.tar.gz"

# Paths
agent_config_path: /etc/computestacks
agent_config_file_path: "{{ agent_config_path }}/agent.yml"
agent_certs_dir: "{{ agent_config_path }}/certs"
agent_docker_certs_dir: "{{ agent_certs_dir }}/docker"
agent_consul_certs_dir: "{{ agent_certs_dir }}/consul"

# Backup Configuration
backups_enabled: true
backups_check_freq: "*/2 * * * *"
backups_prune_freq: "15 1 * * *"
backups_key: "changme!"

# IF you change this, set it in the global vars section of your inventory.
# it is also used by other roles, and if the value is different, your backups will not work.
backup_remote_protocol: "ssh" # local,nfs,ssh

##
# SSH
agent_ssh_enabled: "{{ backup_remote_protocol == 'ssh' }}"
agent_ssh_user: cstacks
agent_ssh_host: "{% if backup_remote_protocol == 'ssh' %}{{ hostvars[groups['backup_server'][0]].node_ip }}{% else %}127.0.0.1{% endif %}"
agent_ssh_port: 22

# Path on the backup server -- will be created by backup role if not exist.
# MUST be an absolute path AND start with a '/', AND NOT have a trailing `/`.
ssh_agent_host_path: "/mnt"

##
# Backup via NFS
backup_uses_nfs: "{{ backup_remote_protocol == 'nfs' }}"
backup_nfs_host: "{% if backup_remote_protocol == 'nfs' %}{{ hostvars[groups['backup_server'][0]].node_ip }}{% else %}127.0.0.1{% endif %}"
nfs_host_path: "/var/nfsshare/volume_backups"

# NFS SSH Settings
backup_nfs_ssh_user: "root"
backup_nfs_ssh_port: "{% if backup_remote_protocol == 'nfs' %}{{ hostvars[groups['backup_server'][0]].ssh_port }}{% else %}22{% endif %}"
backup_nfs_ssh_keyfile: "/root/.ssh/id_ed25519" # path to private key on the node
backup_nfs_opts: ",async,noatime,rsize=32768,wsize=32768"
backup_nfs_create_path: true
