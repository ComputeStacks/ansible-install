{% macro lb_cluster() -%}
  {% for host in groups['nodes'] -%}
    "{{ hostvars[host].consul_listen_ip }}"
  {%- if not loop.last -%},{%- endif -%}
{%- endfor -%}
{% endmacro -%}
{% macro lb_internal_cluster() -%}
  {% for host in groups['nodes'] -%}
    "{{ hostvars[host].etcd_listen_ip }}"
  {%- if not loop.last -%},{%- endif -%}
{%- endfor -%}
{% endmacro -%}
task bootstrap: :environment do

  Rake::Task['install'].execute

  region = Region.first
  if region.nil?
    puts "Error, region not available."
    return false
  end

  puts "Setting General Settings..."
  {% if license_key != "" %}
  puts "...License Key"
  Setting.find_by(name: 'license_key')&.update value: "{{ license_key }}"
  {% endif %}

  puts "...Hostname"
  Setting.find_by(name: 'hostname')&.update value: "{{ cs_portal_domain }}"

  puts "Container Registry Settings..."
  puts "...LetsEncrypt"
  Setting.find_by(name: 'cr_le')&.update value: "{{ cs_portal_domain }}"
  puts "...Base URL"
  Setting.find_by(name: 'registry_base_url')&.update value: "{{ cs_registry_domain }}"
  puts "...Node"
  Setting.find_by(name: 'registry_node')&.update value: "127.0.0.1"

  puts "LetsEncrypt..."
  Setting.find_by(name: 'le_validation_server')&.update value: "{{ node_ip }}:3000"

  puts "Creating Metric Client"
  mc = MetricClient.create!(
    endpoint: "{{ prometheus_endpoint }}",
    username: "{{ prometheus_username }}",
    password: "{{ prometheus_password }}"
  )

  # Log Client is used by the controller
  # `loki_*` settings on the region are used by containers.
  lc = LogClient.create!(
    endpoint: "{{ loki_controller_endpoint }}",
    username: "{{ loki_username }}",
    password: "{{ loki_password }}"
  )

  region.update name: "{{ global_region_name }}", 
                metric_client: mc,
                log_client: lc,
                loki_endpoint: "{{ loki_node_endpoint }}"
  

  puts "Creating Nodes..."

  {% for host in groups['nodes'] -%}
  puts "...creating node {{ hostvars[host]['ansible_hostname'] }}..."
  Node.create!(
    label: '{{ hostvars[host]['ansible_hostname'] }}',
    hostname: '{{ hostvars[host]['ansible_hostname'] }}',
    primary_ip: '{{ hostvars[host].consul_listen_ip }}',
    public_ip: '{{ hostvars[host].ansible_default_ipv4.address }}',
    region: region,
    active: true,    
    ssh_port: {{ hostvars[host].ssh_port | int }}
  )
  {{ '' }}
  {{ '' }}
  {%- endfor -%}
  {{ '' }}
  puts "Configuring Network..."
  network = Network.create!(
    cidr: '{{ calico_network }}',
    is_public: false,
    is_ipv4: true,
    active: true,
    name: '{{ calico_network_name }}',
    label: '{{ global_region_name }} Network'
  )
  network.regions << region

  {% if cs_admin_create -%}
  puts "Creating default admin account"
  group = UserGroup.find_by(is_default: true)
  if group.nil?
    default_billing_plan = BillingPlan.find_by(is_default: true)
    group = UserGroup.create!(name: 'default', is_default: true, billing_plan: default_billing_plan)
    region = Region.first
    group.regions << region if region
  end
  user = User.new(
    fname: 'Admin',
    lname: 'Admin',
    email: '{{ cs_admin_email }}',
    bypass_billing: true,
    currency: ENV['CURRENCY'],
    is_admin: true,
    password: '{{ cs_admin_password }}',
    password_confirmation: '{{ cs_admin_password }}',
    user_group: group
  )
  user.skip_confirmation!
  user.save

  {%- endif -%}

{% if floating_ip == '0.0.0.0' or not enable_floating_ip %}
floating_ip = "{{ hostvars[groups['nodes'][0]].ansible_default_ipv4.address|default(ansible_all_ipv4_addresses[0]) }}"
{% else %}
floating_ip = "{{ floating_ip }}"
{% endif %}

  LoadBalancer.create!(
    label: "{{ lb_name }}",
    region: region,
    domain: "{{ cs_app_url }}",
    ext_ip: [ {{ lb_cluster() }} ],
    internal_ip: [ {{ lb_internal_cluster() }} ],
    public_ip: floating_ip,
    shared_certificate: "{{ lb_shared_cert }}",
    direct_connect: {% if calico_network_ipip %}false{% else %}true{% endif %}
  )
  puts "Done."

end
{{ '' }}
