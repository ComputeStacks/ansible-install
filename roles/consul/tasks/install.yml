---
- name: create directories
  file:
    path: "{{ consul_host_config_dir }}"
    state: directory

- name: check if config exists
  stat:
    path: "{{ consul_host_config_dir }}/config.json"
  register: consul_config_exists
  delegate_to: "{{ groups['nodes'][0] }}"

# Read the existing Key
- name: read existing encryption key
  block:
    - name: cat key
      shell: "cat {{ consul_host_config_dir }}/config.json | jq '.encrypt'"
      register: consul_key_read
      run_once: true
      vars:
        ansible_ssh_pipelining: no
    - name: set key fact
      set_fact:
        consul_raw_key: "{{ consul_key_read.stdout }}"
  when: consul_config_exists.stat.exists == True
  delegate_to: "{{ groups['nodes'][0] }}"

- name: generate encryption key
  block:
    - name: generate encryption key
      community.general.docker_container:
        name: "consul-keygen"
        detach: no
        image: "consul:latest"
        state: started
        network_mode: "none"
        container_default_behavior: compatibility
        command: ["consul", "keygen"]
      register: consul_key_read 
      run_once: true
    - name: set key fact
      set_fact:
        consul_raw_key: "{{ consul_key_read.container.Output }}"
    - name: remove consul keygen
      community.general.docker_container:
        name: "consul-keygen"
        container_default_behavior: compatibility
        state: absent
  when: consul_config_exists.stat.exists == False

- name: write configuration file
  template:
    src: config.json.j2
    dest: "{{ consul_host_config_dir }}/config.json"

- name: create data volume
  community.general.docker_volume:
    name: consul-data
    state: present

- name: install systemd
  template:
    src: consul.service.j2
    dest: /etc/systemd/system/consul.service

- name: start consul
  systemd:
    name: consul
    state: started
    enabled: yes
    daemon_reload: yes
