#!/usr/bin/env bash
iptables -A INPUT -i lo -j ACCEPT
iptables -A INPUT -m state --state ESTABLISHED,RELATED -j ACCEPT
iptables -A INPUT -p icmp -j ACCEPT

{% if default_allow_ssh %}
iptables -A INPUT -p tcp --dport 22 -j ACCEPT
{% endif -%}
{% if 'controller' in group_names or 'metrics' in group_names %}
# Grant host access to local docker containers
iptables -A INPUT -p all -s 172.18.0.2/16 -j ACCEPT
{% endif %}

ip6tables -A INPUT -i lo -j ACCEPT
ip6tables -A INPUT -m state --state ESTABLISHED,RELATED -j ACCEPT
ip6tables -A INPUT -p ipv6-icmp -j ACCEPT
ip6tables -A INPUT -p tcp --dport http -j ACCEPT
ip6tables -A INPUT -p tcp --dport https -j ACCEPT

{% if extra_allowed_ipv6_addresses is defined %}
{% for ip in extra_allowed_ipv6_addresses %}

ip6tables -A INPUT -p all -s {{ ip }} -j ACCEPT
{% endfor %}
{% endif %}
ip6tables -A INPUT -j LOG --log-prefix=v6_input_deny --log-level=4
ip6tables -A INPUT -j REJECT --reject-with icmp6-adm-prohibited

{% if 'controller' in group_names or 'metrics' in group_names or 'registry' in group_names %}
# HTTP/HTTPS
iptables -A INPUT -p tcp --dport 80 -j ACCEPT
iptables -A INPUT -p tcp --dport 443 -j ACCEPT
{% endif %}

{% if 'registry' in group_names %}
iptables -A INPUT -p tcp --dport 10000:50000 -j ACCEPT
{% endif %}

{% if 'controller' not in group_names %}
# Allow Controller
{% if 'metrics' in group_names %}
iptables -A INPUT -p all -s {{ hostvars[groups['controller'][0]].metrics_ip_address }} -j ACCEPT
{% endif %}
{% if 'backup_server' in group_names %}
iptables -A INPUT -p all -s {{ hostvars[groups['controller'][0]].node_ip }} -j ACCEPT
{% endif %}
{% if 'nodes' in group_names %}
iptables -A INPUT -p all -s {{ hostvars[groups['controller'][0]].node_ip }} -j ACCEPT
{% endif %}
{% if 'registry' in group_names %}
iptables -A INPUT -p all -s {{ hostvars[groups['controller'][0]].metrics_ip_address }} -j ACCEPT
{% endif %}
{% if 'primary_nameserver' in group_names or 'follower_nameservers' in group_names %}
iptables -A INPUT -p all -s {{ hostvars[groups['controller'][0]].ansible_default_ipv4.address }} -j ACCEPT
{% endif %}
{% endif %}

{% if 'nodes' in group_names %}
# Nodes
iptables -t nat -N expose-ports
iptables -t nat -A OUTPUT -j expose-ports
iptables -t nat -A PREROUTING -j expose-ports
iptables -N container-inbound
iptables -A FORWARD -j container-inbound
iptables -A INPUT -p tcp --dport 80 -j ACCEPT
iptables -A INPUT -p tcp --dport 443 -j ACCEPT
iptables -A INPUT -p tcp --dport 10000:50000 -j ACCEPT
iptables -A INPUT -p udp --dport 10000:50000 -j ACCEPT
iptables -A INPUT -p tcp -s {{ container_network }} -j ACCEPT
{% if hostvars[groups['controller'][0]].node_ip != hostvars[groups['metrics'][0]].node_endpoint %}
iptables -A INPUT -p all -s {{ hostvars[groups['metrics'][0]].node_endpoint }} -j ACCEPT
{% endif %}
{% endif %}

{% for host in groups['nodes'] %}
{% if 'controller' in group_names %}
# Allow Nodes
iptables -A INPUT -p all -s {{ hostvars[host].consul_listen_ip }} -j ACCEPT
{% endif %}

{% if 'backup_server' in group_names %}
iptables -A INPUT -p all -s {{ hostvars[host].backup_ip }} -j ACCEPT
{% endif %}

{% if 'metrics' in group_names %}
{% if hostvars[groups['controller'][0]] != hostvars[groups['metrics'][0]] %}
iptables -A INPUT -p all -s {{ hostvars[host].metrics_ip_address }} -j ACCEPT
{% endif %}
{% endif %}

{% endfor %}

{% if 'controller' in group_names %}
{% if hostvars[groups['controller'][0]].metrics_ip_address != hostvars[groups['metrics'][0]].controller_endpoint %}
# Controller
iptables -A INPUT -p all -s {{ hostvars[groups['metrics'][0]].controller_endpoint }} -j ACCEPT
{% endif %}
{% endif %}

{% if 'backup_server' in group_names %}
# Backup
iptables -A INPUT -p all -s {{ hostvars[groups['metrics'][0]].node_endpoint }} -j ACCEPT
{% endif %}

{% if 'registry' in group_names %}
{% if hostvars[groups['registry'][0]].controller_ip != '127.0.0.1' %}
# Registry
iptables -A INPUT -p all -s {{ hostvars[groups['metrics'][0]].controller_endpoint }} -j ACCEPT
{% endif %}
{% endif %}

{% if extra_allowed_ipv4_addresses is defined %}
{% for ip in extra_allowed_ipv4_addresses %}

iptables -A INPUT -p all -s {{ ip }} -j ACCEPT
{% endfor %}
{% endif %}

{% if 'primary_nameserver' in group_names or 'follower_nameservers' in group_names %}
iptables -A INPUT -p tcp --dport 53 -j ACCEPT
iptables -A INPUT -p udp --dport 53 -j ACCEPT
ip6tables -I INPUT -p tcp --dport 53 -j ACCEPT
ip6tables -I INPUT -p udp --dport 53 -j ACCEPT
iptables -A INPUT -p all -s {{ hostvars[groups['controller'][0]].metrics_ip_address }} -j ACCEPT
{% for host in groups['primary_nameserver'] %}
{% if hostvars[host].postgres_ip != postgres_ip %}
iptables -A INPUT -p all -s {{ hostvars[host].postgres_ip }} -j ACCEPT
{% endif %}
{% endfor %}
{% for host in groups['follower_nameservers'] %}
{% if hostvars[host].postgres_ip != postgres_ip %}
iptables -A INPUT -p all -s {{ hostvars[host].postgres_ip }} -j ACCEPT
{% endif %}
{% endfor %}
{% endif %}

iptables -P INPUT DROP
